// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package blog

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Blog struct {
	Topic       string            `thrift:"topic,1" json:"topic"`
	Content     []byte            `thrift:"content,2" json:"content"`
	CreatedTime int64             `thrift:"createdTime,3" json:"createdTime"`
	Id          string            `thrift:"id,4" json:"id"`
	IpAddress   string            `thrift:"ipAddress,5" json:"ipAddress"`
	Props       map[string]string `thrift:"props,6" json:"props"`
	Note        string            `thrift:"note,7" json:"note"`
	Notid       int32             `thrift:"notid,8" json:"notid"`
}

func NewBlog() *Blog {
	return &Blog{}
}

func (p *Blog) GetTopic() string {
	return p.Topic
}

func (p *Blog) GetContent() []byte {
	return p.Content
}

func (p *Blog) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Blog) GetId() string {
	return p.Id
}

func (p *Blog) GetIpAddress() string {
	return p.IpAddress
}

func (p *Blog) GetProps() map[string]string {
	return p.Props
}

func (p *Blog) GetNote() string {
	return p.Note
}

func (p *Blog) GetNotid() int32 {
	return p.Notid
}
func (p *Blog) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Blog) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *Blog) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *Blog) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Blog) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *Blog) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.IpAddress = v
	}
	return nil
}

func (p *Blog) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Props = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Props[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Blog) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Note = v
	}
	return nil
}

func (p *Blog) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Notid = v
	}
	return nil
}

func (p *Blog) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Blog"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Blog) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topic", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topic: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Topic)); err != nil {
		return fmt.Errorf("%T.topic (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topic: %s", p, err)
	}
	return err
}

func (p *Blog) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:content: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Content); err != nil {
		return fmt.Errorf("%T.content (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:content: %s", p, err)
	}
	return err
}

func (p *Blog) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:createdTime: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:createdTime: %s", p, err)
	}
	return err
}

func (p *Blog) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:id: %s", p, err)
	}
	return err
}

func (p *Blog) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ipAddress", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:ipAddress: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IpAddress)); err != nil {
		return fmt.Errorf("%T.ipAddress (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:ipAddress: %s", p, err)
	}
	return err
}

func (p *Blog) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("props", thrift.MAP, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:props: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Props)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Props {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:props: %s", p, err)
	}
	return err
}

func (p *Blog) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:note: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Note)); err != nil {
		return fmt.Errorf("%T.note (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:note: %s", p, err)
	}
	return err
}

func (p *Blog) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notid", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:notid: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Notid)); err != nil {
		return fmt.Errorf("%T.notid (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:notid: %s", p, err)
	}
	return err
}

func (p *Blog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Blog(%+v)", *p)
}
